// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/sec_kill/proto/sec_kill.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecKill_SecKillV1_FullMethodName      = "/api.sec_kill.v1.SecKill/SecKillV1"
	SecKill_SecKillV2_FullMethodName      = "/api.sec_kill.v1.SecKill/SecKillV2"
	SecKill_SecKillV3_FullMethodName      = "/api.sec_kill.v1.SecKill/SecKillV3"
	SecKill_GetGoodsList_FullMethodName   = "/api.sec_kill.v1.SecKill/GetGoodsList"
	SecKill_GetSecKillInfo_FullMethodName = "/api.sec_kill.v1.SecKill/GetSecKillInfo"
	SecKill_GetOrderList_FullMethodName   = "/api.sec_kill.v1.SecKill/GetOrderList"
	SecKill_GetOrderInfo_FullMethodName   = "/api.sec_kill.v1.SecKill/GetOrderInfo"
)

// SecKillClient is the client API for SecKill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecKillClient interface {
	SecKillV1(ctx context.Context, in *SecKillV1Request, opts ...grpc.CallOption) (*SecKillV1Reply, error)
	SecKillV2(ctx context.Context, in *SecKillV2Request, opts ...grpc.CallOption) (*SecKillV2Reply, error)
	SecKillV3(ctx context.Context, in *SecKillV3Request, opts ...grpc.CallOption) (*SecKillV3Reply, error)
	GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListReply, error)
	GetSecKillInfo(ctx context.Context, in *GetSecKillInfoRequest, opts ...grpc.CallOption) (*GetSecKillInfoReply, error)
	GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListReply, error)
	GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoReply, error)
}

type secKillClient struct {
	cc grpc.ClientConnInterface
}

func NewSecKillClient(cc grpc.ClientConnInterface) SecKillClient {
	return &secKillClient{cc}
}

func (c *secKillClient) SecKillV1(ctx context.Context, in *SecKillV1Request, opts ...grpc.CallOption) (*SecKillV1Reply, error) {
	out := new(SecKillV1Reply)
	err := c.cc.Invoke(ctx, SecKill_SecKillV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) SecKillV2(ctx context.Context, in *SecKillV2Request, opts ...grpc.CallOption) (*SecKillV2Reply, error) {
	out := new(SecKillV2Reply)
	err := c.cc.Invoke(ctx, SecKill_SecKillV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) SecKillV3(ctx context.Context, in *SecKillV3Request, opts ...grpc.CallOption) (*SecKillV3Reply, error) {
	out := new(SecKillV3Reply)
	err := c.cc.Invoke(ctx, SecKill_SecKillV3_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetGoodsList(ctx context.Context, in *GetGoodsListRequest, opts ...grpc.CallOption) (*GetGoodsListReply, error) {
	out := new(GetGoodsListReply)
	err := c.cc.Invoke(ctx, SecKill_GetGoodsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetSecKillInfo(ctx context.Context, in *GetSecKillInfoRequest, opts ...grpc.CallOption) (*GetSecKillInfoReply, error) {
	out := new(GetSecKillInfoReply)
	err := c.cc.Invoke(ctx, SecKill_GetSecKillInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetOrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListReply, error) {
	out := new(GetOrderListReply)
	err := c.cc.Invoke(ctx, SecKill_GetOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillClient) GetOrderInfo(ctx context.Context, in *GetOrderInfoRequest, opts ...grpc.CallOption) (*GetOrderInfoReply, error) {
	out := new(GetOrderInfoReply)
	err := c.cc.Invoke(ctx, SecKill_GetOrderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecKillServer is the server API for SecKill service.
// All implementations must embed UnimplementedSecKillServer
// for forward compatibility
type SecKillServer interface {
	SecKillV1(context.Context, *SecKillV1Request) (*SecKillV1Reply, error)
	SecKillV2(context.Context, *SecKillV2Request) (*SecKillV2Reply, error)
	SecKillV3(context.Context, *SecKillV3Request) (*SecKillV3Reply, error)
	GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListReply, error)
	GetSecKillInfo(context.Context, *GetSecKillInfoRequest) (*GetSecKillInfoReply, error)
	GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListReply, error)
	GetOrderInfo(context.Context, *GetOrderInfoRequest) (*GetOrderInfoReply, error)
	mustEmbedUnimplementedSecKillServer()
}

// UnimplementedSecKillServer must be embedded to have forward compatible implementations.
type UnimplementedSecKillServer struct {
}

func (UnimplementedSecKillServer) SecKillV1(context.Context, *SecKillV1Request) (*SecKillV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKillV1 not implemented")
}
func (UnimplementedSecKillServer) SecKillV2(context.Context, *SecKillV2Request) (*SecKillV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKillV2 not implemented")
}
func (UnimplementedSecKillServer) SecKillV3(context.Context, *SecKillV3Request) (*SecKillV3Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecKillV3 not implemented")
}
func (UnimplementedSecKillServer) GetGoodsList(context.Context, *GetGoodsListRequest) (*GetGoodsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (UnimplementedSecKillServer) GetSecKillInfo(context.Context, *GetSecKillInfoRequest) (*GetSecKillInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecKillInfo not implemented")
}
func (UnimplementedSecKillServer) GetOrderList(context.Context, *GetOrderListRequest) (*GetOrderListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedSecKillServer) GetOrderInfo(context.Context, *GetOrderInfoRequest) (*GetOrderInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedSecKillServer) mustEmbedUnimplementedSecKillServer() {}

// UnsafeSecKillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecKillServer will
// result in compilation errors.
type UnsafeSecKillServer interface {
	mustEmbedUnimplementedSecKillServer()
}

func RegisterSecKillServer(s grpc.ServiceRegistrar, srv SecKillServer) {
	s.RegisterService(&SecKill_ServiceDesc, srv)
}

func _SecKill_SecKillV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecKillV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SecKillV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SecKillV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SecKillV1(ctx, req.(*SecKillV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_SecKillV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecKillV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SecKillV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SecKillV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SecKillV2(ctx, req.(*SecKillV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_SecKillV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecKillV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).SecKillV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_SecKillV3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).SecKillV3(ctx, req.(*SecKillV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetGoodsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetGoodsList(ctx, req.(*GetGoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetSecKillInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecKillInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetSecKillInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetSecKillInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetSecKillInfo(ctx, req.(*GetSecKillInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetOrderList(ctx, req.(*GetOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecKill_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecKillServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecKill_GetOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecKillServer).GetOrderInfo(ctx, req.(*GetOrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecKill_ServiceDesc is the grpc.ServiceDesc for SecKill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecKill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sec_kill.v1.SecKill",
	HandlerType: (*SecKillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecKillV1",
			Handler:    _SecKill_SecKillV1_Handler,
		},
		{
			MethodName: "SecKillV2",
			Handler:    _SecKill_SecKillV2_Handler,
		},
		{
			MethodName: "SecKillV3",
			Handler:    _SecKill_SecKillV3_Handler,
		},
		{
			MethodName: "GetGoodsList",
			Handler:    _SecKill_GetGoodsList_Handler,
		},
		{
			MethodName: "GetSecKillInfo",
			Handler:    _SecKill_GetSecKillInfo_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _SecKill_GetOrderList_Handler,
		},
		{
			MethodName: "GetOrderInfo",
			Handler:    _SecKill_GetOrderInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sec_kill/proto/sec_kill.proto",
}
