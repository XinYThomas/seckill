// Code generated by Wire. DO NOT EDIT.

package main

import (
	zaplog "github.com/BitofferHub/pkg/middlewares/log"
	"github.com/BitofferHub/pkg/middlewares/discovery"
	"github.com/BitofferHub/seckill/internal/biz"
	"github.com/BitofferHub/seckill/internal/conf"
	"github.com/BitofferHub/seckill/internal/data"
	"github.com/BitofferHub/seckill/internal/server"
	"github.com/BitofferHub/seckill/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/go-kratos/kratos/v2/transport/http"

	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

// wireApp
//  @Author <a href="https://bitoffer.cn">狂飙训练营</a>
//  @Description: wireApp init kratos application.
//  @param conf
//  @return *kratos.App
//  @return func()
//  @return error
//
func buildApp(conf conf.Bootstrap) (*kratos.App, func(), error) {
	InitResource(conf)
	dataData,  err := data.NewData(conf.Data)
	//_,  err := data.NewCache(conf.Data, logger)

	if err != nil {
		return nil, nil, err
	}
	stockRepo := data.NewSecKillStockRepo(dataData)
	preStockRepo := data.NewPreSecKillStockRepo(dataData)
	recordRepo := data.NewSecKillRecordRepo(dataData)
	goodsRepo := data.NewGoodsRepo(dataData)
	orderRepo := data.NewOrderRepo(dataData)
	msgRepo := data.NewSecKillMsgRepo(dataData)
	quotaRepo := data.NewQuotaRepo(dataData)
	userQuotaRepo := data.NewUserQuotaRepo(dataData)

	stockUsecase := biz.NewSecKillStockUsecase(stockRepo)
	preStockUsecase := biz.NewPreSecKillStockUsecase(preStockRepo)
	recordUsecase := biz.NewSecKillRecordUsecase(recordRepo)
	goodsUsecase := biz.NewGoodsUsecase(goodsRepo)
	orderUsecase := biz.NewOrderUsecase(orderRepo)
	msgUsecase := biz.NewSecKillMsgUsecase(msgRepo)
	quotaUsecase := biz.NewQuotaUsecase(quotaRepo)
	userQuotaUsecase := biz.NewUserQuotaUsecase(userQuotaRepo)
	service := service.NewSecKillService(stockUsecase, preStockUsecase, recordUsecase, goodsUsecase, orderUsecase,
		msgUsecase, quotaUsecase, userQuotaUsecase)
	us = service
	grpcServer := server.NewGRPCServer(conf.Server, service)
	httpSvr2 := CreateHttpSvr(conf.Server)
	us.Consume()
	app := newApp(conf.Micro, grpcServer, httpSvr2)
	return app, func() {
	//	cleanup()
	}, nil
}

var us *service.SecKillService
//
// CreateHttpSvr
//  @Author <a href="https://bitoffer.cn">狂飙训练营</a>
//  @Description:  create gin http handler
//  @return *http.Server
//
func CreateHttpSvr(c *conf.Server) *http.Server{
	router := gin.Default()

	// 使用gin中间件
	router.Use(InfoLog())
	v1 := router.Group("v1")
	{
		v1.POST("/sec_kill", SecKill)
	}
	v2 := router.Group("v2")
	{
		v2.POST("/sec_kill", SecKillV2)
	}
	v3 := router.Group("v3")
	{
		v3.POST("/sec_kill", SecKillV3)
		v3.GET("/get_sec_kill_info", GetSecKillInfo)
	}
	router.GET("/get_goods_info", GetGoodsInfo)
	router.GET("/get_goods_list", GetGoodsList)

	httpSrv := http.NewServer(http.Address(c.Http.Addr))
	httpSrv.HandlePrefix("/", router)
	return httpSrv
}

//
// InitResource
//  @Author <a href="https://bitoffer.cn">狂飙训练营</a>
//  @Description: 初始化资源
//  @param conf
//
func InitResource(conf conf.Bootstrap) {
	discovery.NewRegistrar([]string{conf.Micro.Lb.GetAddr()})
	zaplog.Init(
		zaplog.WithLogPath("../log/"),
		zaplog.WithLogLevel("info"),
		zaplog.WithFileName("bitstorm.log"),
		zaplog.WithMaxBackups(100),
		zaplog.WithMaxSize(1024 * 1024 * 10),
		zaplog.WithConsole(false),
		)
}